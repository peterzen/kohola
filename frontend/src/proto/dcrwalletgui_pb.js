/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var api_pb = require('./api_pb.js');
goog.exportSymbol('proto.dcrwalletgui.AccountPreference', null, global);
goog.exportSymbol('proto.dcrwalletgui.AltCurrencyRates', null, global);
goog.exportSymbol('proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate', null, global);
goog.exportSymbol('proto.dcrwalletgui.AppConfiguration', null, global);
goog.exportSymbol('proto.dcrwalletgui.CheckConnectionRequest', null, global);
goog.exportSymbol('proto.dcrwalletgui.CheckConnectionResponse', null, global);
goog.exportSymbol('proto.dcrwalletgui.ConnectWalletRequest', null, global);
goog.exportSymbol('proto.dcrwalletgui.ConnectWalletResponse', null, global);
goog.exportSymbol('proto.dcrwalletgui.GRPCEndpoint', null, global);
goog.exportSymbol('proto.dcrwalletgui.GetConfigRequest', null, global);
goog.exportSymbol('proto.dcrwalletgui.GetMarketChartRequest', null, global);
goog.exportSymbol('proto.dcrwalletgui.GetMarketChartResponse', null, global);
goog.exportSymbol('proto.dcrwalletgui.MarketChartDataPoint', null, global);
goog.exportSymbol('proto.dcrwalletgui.Network', null, global);
goog.exportSymbol('proto.dcrwalletgui.RPCEndpoint', null, global);
goog.exportSymbol('proto.dcrwalletgui.SetConfigRequest', null, global);
goog.exportSymbol('proto.dcrwalletgui.SetConfigResponse', null, global);
goog.exportSymbol('proto.dcrwalletgui.SetConfigResponse.UpdateStatus', null, global);
goog.exportSymbol('proto.dcrwalletgui.StakeDiffHistory', null, global);
goog.exportSymbol('proto.dcrwalletgui.StakingHistory', null, global);
goog.exportSymbol('proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem', null, global);
goog.exportSymbol('proto.dcrwalletgui.WalletPreferences', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.GetConfigRequest.displayName = 'proto.dcrwalletgui.GetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    passphrase: msg.getPassphrase_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.GetConfigRequest}
 */
proto.dcrwalletgui.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.GetConfigRequest;
  return proto.dcrwalletgui.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.GetConfigRequest}
 */
proto.dcrwalletgui.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassphrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassphrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes passphrase = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dcrwalletgui.GetConfigRequest.prototype.getPassphrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes passphrase = 1;
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {string}
 */
proto.dcrwalletgui.GetConfigRequest.prototype.getPassphrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassphrase()));
};


/**
 * optional bytes passphrase = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.GetConfigRequest.prototype.getPassphrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassphrase()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrwalletgui.GetConfigRequest.prototype.setPassphrase = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.SetConfigRequest.displayName = 'proto.dcrwalletgui.SetConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appConfig: (f = msg.getAppConfig()) && proto.dcrwalletgui.AppConfiguration.toObject(includeInstance, f),
    passphrase: msg.getPassphrase_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.SetConfigRequest}
 */
proto.dcrwalletgui.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.SetConfigRequest;
  return proto.dcrwalletgui.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.SetConfigRequest}
 */
proto.dcrwalletgui.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dcrwalletgui.AppConfiguration;
      reader.readMessage(value,proto.dcrwalletgui.AppConfiguration.deserializeBinaryFromReader);
      msg.setAppConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassphrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dcrwalletgui.AppConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getPassphrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional AppConfiguration app_config = 1;
 * @return {?proto.dcrwalletgui.AppConfiguration}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.getAppConfig = function() {
  return /** @type{?proto.dcrwalletgui.AppConfiguration} */ (
    jspb.Message.getWrapperField(this, proto.dcrwalletgui.AppConfiguration, 1));
};


/** @param {?proto.dcrwalletgui.AppConfiguration|undefined} value */
proto.dcrwalletgui.SetConfigRequest.prototype.setAppConfig = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dcrwalletgui.SetConfigRequest.prototype.clearAppConfig = function() {
  this.setAppConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.hasAppConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes passphrase = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.getPassphrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes passphrase = 2;
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {string}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.getPassphrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassphrase()));
};


/**
 * optional bytes passphrase = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassphrase()`
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.SetConfigRequest.prototype.getPassphrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassphrase()));
};


/** @param {!(string|Uint8Array)} value */
proto.dcrwalletgui.SetConfigRequest.prototype.setPassphrase = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.SetConfigResponse.displayName = 'proto.dcrwalletgui.SetConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.SetConfigResponse}
 */
proto.dcrwalletgui.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.SetConfigResponse;
  return proto.dcrwalletgui.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.SetConfigResponse}
 */
proto.dcrwalletgui.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dcrwalletgui.SetConfigResponse.UpdateStatus} */ (reader.readEnum());
      msg.setUpdateStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getErrorDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.dcrwalletgui.SetConfigResponse.UpdateStatus = {
  STATUS_SUCCESS: 0,
  STATUS_ERROR: 1
};

/**
 * optional UpdateStatus update_status = 1;
 * @return {!proto.dcrwalletgui.SetConfigResponse.UpdateStatus}
 */
proto.dcrwalletgui.SetConfigResponse.prototype.getUpdateStatus = function() {
  return /** @type {!proto.dcrwalletgui.SetConfigResponse.UpdateStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.dcrwalletgui.SetConfigResponse.UpdateStatus} value */
proto.dcrwalletgui.SetConfigResponse.prototype.setUpdateStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 error_code = 2;
 * @return {number}
 */
proto.dcrwalletgui.SetConfigResponse.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrwalletgui.SetConfigResponse.prototype.setErrorCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string error_description = 3;
 * @return {string}
 */
proto.dcrwalletgui.SetConfigResponse.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.dcrwalletgui.SetConfigResponse.prototype.setErrorDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.RPCEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.RPCEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.RPCEndpoint.displayName = 'proto.dcrwalletgui.RPCEndpoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.RPCEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.RPCEndpoint} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.RPCEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    password: jspb.Message.getFieldWithDefault(msg, 5, ""),
    certFileName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    certBlob: jspb.Message.getFieldWithDefault(msg, 7, ""),
    network: jspb.Message.getFieldWithDefault(msg, 8, 0),
    label: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.RPCEndpoint}
 */
proto.dcrwalletgui.RPCEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.RPCEndpoint;
  return proto.dcrwalletgui.RPCEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.RPCEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.RPCEndpoint}
 */
proto.dcrwalletgui.RPCEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertFileName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertBlob(value);
      break;
    case 8:
      var value = /** @type {!proto.dcrwalletgui.Network} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.RPCEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.RPCEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.RPCEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCertFileName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCertBlob();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string hostname = 2;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setHostname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setPort = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string username = 4;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string password = 5;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string cert_file_name = 6;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getCertFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setCertFileName = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string cert_blob = 7;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getCertBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setCertBlob = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional Network network = 8;
 * @return {!proto.dcrwalletgui.Network}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getNetwork = function() {
  return /** @type {!proto.dcrwalletgui.Network} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.dcrwalletgui.Network} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string label = 9;
 * @return {string}
 */
proto.dcrwalletgui.RPCEndpoint.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.dcrwalletgui.RPCEndpoint.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.GRPCEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.GRPCEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.GRPCEndpoint.displayName = 'proto.dcrwalletgui.GRPCEndpoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.GRPCEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.GRPCEndpoint} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.GRPCEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    certFileName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    certBlob: jspb.Message.getFieldWithDefault(msg, 5, ""),
    network: jspb.Message.getFieldWithDefault(msg, 6, 0),
    label: jspb.Message.getFieldWithDefault(msg, 7, ""),
    isWatchingOnly: jspb.Message.getFieldWithDefault(msg, 8, false),
    activeNetwork: jspb.Message.getFieldWithDefault(msg, 9, 0),
    coinType: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.GRPCEndpoint}
 */
proto.dcrwalletgui.GRPCEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.GRPCEndpoint;
  return proto.dcrwalletgui.GRPCEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.GRPCEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.GRPCEndpoint}
 */
proto.dcrwalletgui.GRPCEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertFileName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertBlob(value);
      break;
    case 6:
      var value = /** @type {!proto.dcrwalletgui.Network} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsWatchingOnly(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveNetwork(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoinType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.GRPCEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.GRPCEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.GRPCEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCertFileName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCertBlob();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIsWatchingOnly();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getActiveNetwork();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getCoinType();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string hostname = 2;
 * @return {string}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setHostname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setPort = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string cert_file_name = 4;
 * @return {string}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getCertFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setCertFileName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string cert_blob = 5;
 * @return {string}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getCertBlob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setCertBlob = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional Network network = 6;
 * @return {!proto.dcrwalletgui.Network}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getNetwork = function() {
  return /** @type {!proto.dcrwalletgui.Network} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.dcrwalletgui.Network} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string label = 7;
 * @return {string}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool is_watching_only = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getIsWatchingOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setIsWatchingOnly = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 active_network = 9;
 * @return {number}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getActiveNetwork = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setActiveNetwork = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 coin_type = 10;
 * @return {number}
 */
proto.dcrwalletgui.GRPCEndpoint.prototype.getCoinType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.dcrwalletgui.GRPCEndpoint.prototype.setCoinType = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.AccountPreference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.AccountPreference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.AccountPreference.displayName = 'proto.dcrwalletgui.AccountPreference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.AccountPreference.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.AccountPreference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.AccountPreference} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.AccountPreference.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isHidden: jspb.Message.getFieldWithDefault(msg, 2, false),
    displayOrder: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.AccountPreference}
 */
proto.dcrwalletgui.AccountPreference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.AccountPreference;
  return proto.dcrwalletgui.AccountPreference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.AccountPreference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.AccountPreference}
 */
proto.dcrwalletgui.AccountPreference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccountNumber(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHidden(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDisplayOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.AccountPreference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.AccountPreference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.AccountPreference} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.AccountPreference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIsHidden();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDisplayOrder();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 account_number = 1;
 * @return {number}
 */
proto.dcrwalletgui.AccountPreference.prototype.getAccountNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrwalletgui.AccountPreference.prototype.setAccountNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool is_hidden = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dcrwalletgui.AccountPreference.prototype.getIsHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.dcrwalletgui.AccountPreference.prototype.setIsHidden = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 display_order = 3;
 * @return {number}
 */
proto.dcrwalletgui.AccountPreference.prototype.getDisplayOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrwalletgui.AccountPreference.prototype.setDisplayOrder = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.WalletPreferences = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dcrwalletgui.WalletPreferences.repeatedFields_, null);
};
goog.inherits(proto.dcrwalletgui.WalletPreferences, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.WalletPreferences.displayName = 'proto.dcrwalletgui.WalletPreferences';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dcrwalletgui.WalletPreferences.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.WalletPreferences.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.WalletPreferences.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.WalletPreferences} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.WalletPreferences.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletEndpointId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountPrefsList: jspb.Message.toObjectList(msg.getAccountPrefsList(),
    proto.dcrwalletgui.AccountPreference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.WalletPreferences}
 */
proto.dcrwalletgui.WalletPreferences.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.WalletPreferences;
  return proto.dcrwalletgui.WalletPreferences.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.WalletPreferences} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.WalletPreferences}
 */
proto.dcrwalletgui.WalletPreferences.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletEndpointId(value);
      break;
    case 2:
      var value = new proto.dcrwalletgui.AccountPreference;
      reader.readMessage(value,proto.dcrwalletgui.AccountPreference.deserializeBinaryFromReader);
      msg.addAccountPrefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.WalletPreferences.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.WalletPreferences.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.WalletPreferences} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.WalletPreferences.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletEndpointId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountPrefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dcrwalletgui.AccountPreference.serializeBinaryToWriter
    );
  }
};


/**
 * optional string wallet_endpoint_id = 1;
 * @return {string}
 */
proto.dcrwalletgui.WalletPreferences.prototype.getWalletEndpointId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dcrwalletgui.WalletPreferences.prototype.setWalletEndpointId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated AccountPreference account_prefs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dcrwalletgui.AccountPreference>}
 */
proto.dcrwalletgui.WalletPreferences.prototype.getAccountPrefsList = function() {
  return /** @type{!Array.<!proto.dcrwalletgui.AccountPreference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dcrwalletgui.AccountPreference, 2));
};


/** @param {!Array.<!proto.dcrwalletgui.AccountPreference>} value */
proto.dcrwalletgui.WalletPreferences.prototype.setAccountPrefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.dcrwalletgui.AccountPreference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dcrwalletgui.AccountPreference}
 */
proto.dcrwalletgui.WalletPreferences.prototype.addAccountPrefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.dcrwalletgui.AccountPreference, opt_index);
};


proto.dcrwalletgui.WalletPreferences.prototype.clearAccountPrefsList = function() {
  this.setAccountPrefsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.AppConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dcrwalletgui.AppConfiguration.repeatedFields_, null);
};
goog.inherits(proto.dcrwalletgui.AppConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.AppConfiguration.displayName = 'proto.dcrwalletgui.AppConfiguration';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dcrwalletgui.AppConfiguration.repeatedFields_ = [2,4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.AppConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.AppConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.AppConfiguration} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.AppConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    dcrdEndpoint: (f = msg.getDcrdEndpoint()) && proto.dcrwalletgui.RPCEndpoint.toObject(includeInstance, f),
    walletEndpointsList: jspb.Message.toObjectList(msg.getWalletEndpointsList(),
    proto.dcrwalletgui.GRPCEndpoint.toObject, includeInstance),
    defaultWalletEndpointId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    walletPreferencesList: jspb.Message.toObjectList(msg.getWalletPreferencesList(),
    proto.dcrwalletgui.WalletPreferences.toObject, includeInstance),
    accountMixerRequestDefaults: (f = msg.getAccountMixerRequestDefaults()) && api_pb.RunAccountMixerRequest.toObject(includeInstance, f),
    runAutoBuyerRequestDefaults: (f = msg.getRunAutoBuyerRequestDefaults()) && api_pb.RunTicketBuyerRequest.toObject(includeInstance, f),
    altDisplayCurrenciesList: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.AppConfiguration}
 */
proto.dcrwalletgui.AppConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.AppConfiguration;
  return proto.dcrwalletgui.AppConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.AppConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.AppConfiguration}
 */
proto.dcrwalletgui.AppConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dcrwalletgui.RPCEndpoint;
      reader.readMessage(value,proto.dcrwalletgui.RPCEndpoint.deserializeBinaryFromReader);
      msg.setDcrdEndpoint(value);
      break;
    case 2:
      var value = new proto.dcrwalletgui.GRPCEndpoint;
      reader.readMessage(value,proto.dcrwalletgui.GRPCEndpoint.deserializeBinaryFromReader);
      msg.addWalletEndpoints(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultWalletEndpointId(value);
      break;
    case 4:
      var value = new proto.dcrwalletgui.WalletPreferences;
      reader.readMessage(value,proto.dcrwalletgui.WalletPreferences.deserializeBinaryFromReader);
      msg.addWalletPreferences(value);
      break;
    case 5:
      var value = new api_pb.RunAccountMixerRequest;
      reader.readMessage(value,api_pb.RunAccountMixerRequest.deserializeBinaryFromReader);
      msg.setAccountMixerRequestDefaults(value);
      break;
    case 6:
      var value = new api_pb.RunTicketBuyerRequest;
      reader.readMessage(value,api_pb.RunTicketBuyerRequest.deserializeBinaryFromReader);
      msg.setRunAutoBuyerRequestDefaults(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAltDisplayCurrencies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.AppConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.AppConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.AppConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.AppConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDcrdEndpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dcrwalletgui.RPCEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getWalletEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dcrwalletgui.GRPCEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getDefaultWalletEndpointId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWalletPreferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.dcrwalletgui.WalletPreferences.serializeBinaryToWriter
    );
  }
  f = message.getAccountMixerRequestDefaults();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      api_pb.RunAccountMixerRequest.serializeBinaryToWriter
    );
  }
  f = message.getRunAutoBuyerRequestDefaults();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      api_pb.RunTicketBuyerRequest.serializeBinaryToWriter
    );
  }
  f = message.getAltDisplayCurrenciesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional RPCEndpoint dcrd_endpoint = 1;
 * @return {?proto.dcrwalletgui.RPCEndpoint}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getDcrdEndpoint = function() {
  return /** @type{?proto.dcrwalletgui.RPCEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.dcrwalletgui.RPCEndpoint, 1));
};


/** @param {?proto.dcrwalletgui.RPCEndpoint|undefined} value */
proto.dcrwalletgui.AppConfiguration.prototype.setDcrdEndpoint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dcrwalletgui.AppConfiguration.prototype.clearDcrdEndpoint = function() {
  this.setDcrdEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.AppConfiguration.prototype.hasDcrdEndpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated GRPCEndpoint wallet_endpoints = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dcrwalletgui.GRPCEndpoint>}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getWalletEndpointsList = function() {
  return /** @type{!Array.<!proto.dcrwalletgui.GRPCEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dcrwalletgui.GRPCEndpoint, 2));
};


/** @param {!Array.<!proto.dcrwalletgui.GRPCEndpoint>} value */
proto.dcrwalletgui.AppConfiguration.prototype.setWalletEndpointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.dcrwalletgui.GRPCEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dcrwalletgui.GRPCEndpoint}
 */
proto.dcrwalletgui.AppConfiguration.prototype.addWalletEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.dcrwalletgui.GRPCEndpoint, opt_index);
};


proto.dcrwalletgui.AppConfiguration.prototype.clearWalletEndpointsList = function() {
  this.setWalletEndpointsList([]);
};


/**
 * optional string default_wallet_endpoint_id = 3;
 * @return {string}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getDefaultWalletEndpointId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.dcrwalletgui.AppConfiguration.prototype.setDefaultWalletEndpointId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated WalletPreferences wallet_preferences = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dcrwalletgui.WalletPreferences>}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getWalletPreferencesList = function() {
  return /** @type{!Array.<!proto.dcrwalletgui.WalletPreferences>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dcrwalletgui.WalletPreferences, 4));
};


/** @param {!Array.<!proto.dcrwalletgui.WalletPreferences>} value */
proto.dcrwalletgui.AppConfiguration.prototype.setWalletPreferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.dcrwalletgui.WalletPreferences=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dcrwalletgui.WalletPreferences}
 */
proto.dcrwalletgui.AppConfiguration.prototype.addWalletPreferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.dcrwalletgui.WalletPreferences, opt_index);
};


proto.dcrwalletgui.AppConfiguration.prototype.clearWalletPreferencesList = function() {
  this.setWalletPreferencesList([]);
};


/**
 * optional walletrpc.RunAccountMixerRequest account_mixer_request_defaults = 5;
 * @return {?proto.walletrpc.RunAccountMixerRequest}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getAccountMixerRequestDefaults = function() {
  return /** @type{?proto.walletrpc.RunAccountMixerRequest} */ (
    jspb.Message.getWrapperField(this, api_pb.RunAccountMixerRequest, 5));
};


/** @param {?proto.walletrpc.RunAccountMixerRequest|undefined} value */
proto.dcrwalletgui.AppConfiguration.prototype.setAccountMixerRequestDefaults = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.dcrwalletgui.AppConfiguration.prototype.clearAccountMixerRequestDefaults = function() {
  this.setAccountMixerRequestDefaults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.AppConfiguration.prototype.hasAccountMixerRequestDefaults = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional walletrpc.RunTicketBuyerRequest run_auto_buyer_request_defaults = 6;
 * @return {?proto.walletrpc.RunTicketBuyerRequest}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getRunAutoBuyerRequestDefaults = function() {
  return /** @type{?proto.walletrpc.RunTicketBuyerRequest} */ (
    jspb.Message.getWrapperField(this, api_pb.RunTicketBuyerRequest, 6));
};


/** @param {?proto.walletrpc.RunTicketBuyerRequest|undefined} value */
proto.dcrwalletgui.AppConfiguration.prototype.setRunAutoBuyerRequestDefaults = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.dcrwalletgui.AppConfiguration.prototype.clearRunAutoBuyerRequestDefaults = function() {
  this.setRunAutoBuyerRequestDefaults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.AppConfiguration.prototype.hasRunAutoBuyerRequestDefaults = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string alt_display_currencies = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.dcrwalletgui.AppConfiguration.prototype.getAltDisplayCurrenciesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<string>} value */
proto.dcrwalletgui.AppConfiguration.prototype.setAltDisplayCurrenciesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.dcrwalletgui.AppConfiguration.prototype.addAltDisplayCurrencies = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.dcrwalletgui.AppConfiguration.prototype.clearAltDisplayCurrenciesList = function() {
  this.setAltDisplayCurrenciesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.CheckConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.CheckConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.CheckConnectionRequest.displayName = 'proto.dcrwalletgui.CheckConnectionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.CheckConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.CheckConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.CheckConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.CheckConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    grpcEndpoint: (f = msg.getGrpcEndpoint()) && proto.dcrwalletgui.GRPCEndpoint.toObject(includeInstance, f),
    rpcEndpoint: (f = msg.getRpcEndpoint()) && proto.dcrwalletgui.RPCEndpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.CheckConnectionRequest}
 */
proto.dcrwalletgui.CheckConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.CheckConnectionRequest;
  return proto.dcrwalletgui.CheckConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.CheckConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.CheckConnectionRequest}
 */
proto.dcrwalletgui.CheckConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dcrwalletgui.GRPCEndpoint;
      reader.readMessage(value,proto.dcrwalletgui.GRPCEndpoint.deserializeBinaryFromReader);
      msg.setGrpcEndpoint(value);
      break;
    case 2:
      var value = new proto.dcrwalletgui.RPCEndpoint;
      reader.readMessage(value,proto.dcrwalletgui.RPCEndpoint.deserializeBinaryFromReader);
      msg.setRpcEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.CheckConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.CheckConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.CheckConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.CheckConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrpcEndpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dcrwalletgui.GRPCEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getRpcEndpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dcrwalletgui.RPCEndpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional GRPCEndpoint grpc_endpoint = 1;
 * @return {?proto.dcrwalletgui.GRPCEndpoint}
 */
proto.dcrwalletgui.CheckConnectionRequest.prototype.getGrpcEndpoint = function() {
  return /** @type{?proto.dcrwalletgui.GRPCEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.dcrwalletgui.GRPCEndpoint, 1));
};


/** @param {?proto.dcrwalletgui.GRPCEndpoint|undefined} value */
proto.dcrwalletgui.CheckConnectionRequest.prototype.setGrpcEndpoint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.dcrwalletgui.CheckConnectionRequest.prototype.clearGrpcEndpoint = function() {
  this.setGrpcEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.CheckConnectionRequest.prototype.hasGrpcEndpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RPCEndpoint rpc_endpoint = 2;
 * @return {?proto.dcrwalletgui.RPCEndpoint}
 */
proto.dcrwalletgui.CheckConnectionRequest.prototype.getRpcEndpoint = function() {
  return /** @type{?proto.dcrwalletgui.RPCEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.dcrwalletgui.RPCEndpoint, 2));
};


/** @param {?proto.dcrwalletgui.RPCEndpoint|undefined} value */
proto.dcrwalletgui.CheckConnectionRequest.prototype.setRpcEndpoint = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.dcrwalletgui.CheckConnectionRequest.prototype.clearRpcEndpoint = function() {
  this.setRpcEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.CheckConnectionRequest.prototype.hasRpcEndpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.CheckConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.CheckConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.CheckConnectionResponse.displayName = 'proto.dcrwalletgui.CheckConnectionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.CheckConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.CheckConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.CheckConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.CheckConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: jspb.Message.getFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.CheckConnectionResponse}
 */
proto.dcrwalletgui.CheckConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.CheckConnectionResponse;
  return proto.dcrwalletgui.CheckConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.CheckConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.CheckConnectionResponse}
 */
proto.dcrwalletgui.CheckConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.CheckConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.CheckConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.CheckConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.CheckConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool isSuccess = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dcrwalletgui.CheckConnectionResponse.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.dcrwalletgui.CheckConnectionResponse.prototype.setIssuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.dcrwalletgui.CheckConnectionResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dcrwalletgui.CheckConnectionResponse.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.ConnectWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.ConnectWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.ConnectWalletRequest.displayName = 'proto.dcrwalletgui.ConnectWalletRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.ConnectWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.ConnectWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.ConnectWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.ConnectWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletEndpointId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.ConnectWalletRequest}
 */
proto.dcrwalletgui.ConnectWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.ConnectWalletRequest;
  return proto.dcrwalletgui.ConnectWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.ConnectWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.ConnectWalletRequest}
 */
proto.dcrwalletgui.ConnectWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletEndpointId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.ConnectWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.ConnectWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.ConnectWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.ConnectWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletEndpointId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string wallet_endpoint_id = 1;
 * @return {string}
 */
proto.dcrwalletgui.ConnectWalletRequest.prototype.getWalletEndpointId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dcrwalletgui.ConnectWalletRequest.prototype.setWalletEndpointId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.ConnectWalletResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.ConnectWalletResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.ConnectWalletResponse.displayName = 'proto.dcrwalletgui.ConnectWalletResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.ConnectWalletResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.ConnectWalletResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.ConnectWalletResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.ConnectWalletResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: jspb.Message.getFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    endpoint: (f = msg.getEndpoint()) && proto.dcrwalletgui.GRPCEndpoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.ConnectWalletResponse}
 */
proto.dcrwalletgui.ConnectWalletResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.ConnectWalletResponse;
  return proto.dcrwalletgui.ConnectWalletResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.ConnectWalletResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.ConnectWalletResponse}
 */
proto.dcrwalletgui.ConnectWalletResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.dcrwalletgui.GRPCEndpoint;
      reader.readMessage(value,proto.dcrwalletgui.GRPCEndpoint.deserializeBinaryFromReader);
      msg.setEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.ConnectWalletResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.ConnectWalletResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.ConnectWalletResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.ConnectWalletResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEndpoint();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dcrwalletgui.GRPCEndpoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isSuccess = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dcrwalletgui.ConnectWalletResponse.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.dcrwalletgui.ConnectWalletResponse.prototype.setIssuccess = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.dcrwalletgui.ConnectWalletResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.dcrwalletgui.ConnectWalletResponse.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional GRPCEndpoint endpoint = 3;
 * @return {?proto.dcrwalletgui.GRPCEndpoint}
 */
proto.dcrwalletgui.ConnectWalletResponse.prototype.getEndpoint = function() {
  return /** @type{?proto.dcrwalletgui.GRPCEndpoint} */ (
    jspb.Message.getWrapperField(this, proto.dcrwalletgui.GRPCEndpoint, 3));
};


/** @param {?proto.dcrwalletgui.GRPCEndpoint|undefined} value */
proto.dcrwalletgui.ConnectWalletResponse.prototype.setEndpoint = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dcrwalletgui.ConnectWalletResponse.prototype.clearEndpoint = function() {
  this.setEndpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.dcrwalletgui.ConnectWalletResponse.prototype.hasEndpoint = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.AltCurrencyRates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dcrwalletgui.AltCurrencyRates.repeatedFields_, null);
};
goog.inherits(proto.dcrwalletgui.AltCurrencyRates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.AltCurrencyRates.displayName = 'proto.dcrwalletgui.AltCurrencyRates';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dcrwalletgui.AltCurrencyRates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.AltCurrencyRates.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.AltCurrencyRates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.AltCurrencyRates} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.AltCurrencyRates.toObject = function(includeInstance, msg) {
  var f, obj = {
    ratesList: jspb.Message.toObjectList(msg.getRatesList(),
    proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.toObject, includeInstance),
    lastUpdatedTs: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.AltCurrencyRates}
 */
proto.dcrwalletgui.AltCurrencyRates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.AltCurrencyRates;
  return proto.dcrwalletgui.AltCurrencyRates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.AltCurrencyRates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.AltCurrencyRates}
 */
proto.dcrwalletgui.AltCurrencyRates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate;
      reader.readMessage(value,proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.deserializeBinaryFromReader);
      msg.addRates(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdatedTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.AltCurrencyRates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.AltCurrencyRates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.AltCurrencyRates} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.AltCurrencyRates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdatedTs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.displayName = 'proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currentRate: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate;
  return proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentRate();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string currency_code = 1;
 * @return {string}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.prototype.setCurrencyCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float current_rate = 2;
 * @return {number}
 */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.prototype.getCurrentRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate.prototype.setCurrentRate = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated AltCurrencyRate rates = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate>}
 */
proto.dcrwalletgui.AltCurrencyRates.prototype.getRatesList = function() {
  return /** @type{!Array.<!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate, 1));
};


/** @param {!Array.<!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate>} value */
proto.dcrwalletgui.AltCurrencyRates.prototype.setRatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate}
 */
proto.dcrwalletgui.AltCurrencyRates.prototype.addRates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dcrwalletgui.AltCurrencyRates.AltCurrencyRate, opt_index);
};


proto.dcrwalletgui.AltCurrencyRates.prototype.clearRatesList = function() {
  this.setRatesList([]);
};


/**
 * optional int64 last_updated_ts = 2;
 * @return {number}
 */
proto.dcrwalletgui.AltCurrencyRates.prototype.getLastUpdatedTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrwalletgui.AltCurrencyRates.prototype.setLastUpdatedTs = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.GetMarketChartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.GetMarketChartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.GetMarketChartRequest.displayName = 'proto.dcrwalletgui.GetMarketChartRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.GetMarketChartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.GetMarketChartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.GetMarketChartRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.GetMarketChartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currencyCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    days: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.GetMarketChartRequest}
 */
proto.dcrwalletgui.GetMarketChartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.GetMarketChartRequest;
  return proto.dcrwalletgui.GetMarketChartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.GetMarketChartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.GetMarketChartRequest}
 */
proto.dcrwalletgui.GetMarketChartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.GetMarketChartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.GetMarketChartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.GetMarketChartRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.GetMarketChartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDays();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string currency_code = 1;
 * @return {string}
 */
proto.dcrwalletgui.GetMarketChartRequest.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.dcrwalletgui.GetMarketChartRequest.prototype.setCurrencyCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 days = 2;
 * @return {number}
 */
proto.dcrwalletgui.GetMarketChartRequest.prototype.getDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrwalletgui.GetMarketChartRequest.prototype.setDays = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.MarketChartDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.MarketChartDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.MarketChartDataPoint.displayName = 'proto.dcrwalletgui.MarketChartDataPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.MarketChartDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.MarketChartDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.MarketChartDataPoint} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.MarketChartDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exchangeRate: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.MarketChartDataPoint}
 */
proto.dcrwalletgui.MarketChartDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.MarketChartDataPoint;
  return proto.dcrwalletgui.MarketChartDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.MarketChartDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.MarketChartDataPoint}
 */
proto.dcrwalletgui.MarketChartDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setExchangeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.MarketChartDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.MarketChartDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.MarketChartDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.MarketChartDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getExchangeRate();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.dcrwalletgui.MarketChartDataPoint.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrwalletgui.MarketChartDataPoint.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float exchange_rate = 2;
 * @return {number}
 */
proto.dcrwalletgui.MarketChartDataPoint.prototype.getExchangeRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.dcrwalletgui.MarketChartDataPoint.prototype.setExchangeRate = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.GetMarketChartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dcrwalletgui.GetMarketChartResponse.repeatedFields_, null);
};
goog.inherits(proto.dcrwalletgui.GetMarketChartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.GetMarketChartResponse.displayName = 'proto.dcrwalletgui.GetMarketChartResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dcrwalletgui.GetMarketChartResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.GetMarketChartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.GetMarketChartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.GetMarketChartResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.GetMarketChartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datapointsList: jspb.Message.toObjectList(msg.getDatapointsList(),
    proto.dcrwalletgui.MarketChartDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.GetMarketChartResponse}
 */
proto.dcrwalletgui.GetMarketChartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.GetMarketChartResponse;
  return proto.dcrwalletgui.GetMarketChartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.GetMarketChartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.GetMarketChartResponse}
 */
proto.dcrwalletgui.GetMarketChartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dcrwalletgui.MarketChartDataPoint;
      reader.readMessage(value,proto.dcrwalletgui.MarketChartDataPoint.deserializeBinaryFromReader);
      msg.addDatapoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.GetMarketChartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.GetMarketChartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.GetMarketChartResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.GetMarketChartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatapointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dcrwalletgui.MarketChartDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MarketChartDataPoint datapoints = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dcrwalletgui.MarketChartDataPoint>}
 */
proto.dcrwalletgui.GetMarketChartResponse.prototype.getDatapointsList = function() {
  return /** @type{!Array.<!proto.dcrwalletgui.MarketChartDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dcrwalletgui.MarketChartDataPoint, 1));
};


/** @param {!Array.<!proto.dcrwalletgui.MarketChartDataPoint>} value */
proto.dcrwalletgui.GetMarketChartResponse.prototype.setDatapointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dcrwalletgui.MarketChartDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dcrwalletgui.MarketChartDataPoint}
 */
proto.dcrwalletgui.GetMarketChartResponse.prototype.addDatapoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dcrwalletgui.MarketChartDataPoint, opt_index);
};


proto.dcrwalletgui.GetMarketChartResponse.prototype.clearDatapointsList = function() {
  this.setDatapointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.StakingHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dcrwalletgui.StakingHistory.repeatedFields_, null);
};
goog.inherits(proto.dcrwalletgui.StakingHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.StakingHistory.displayName = 'proto.dcrwalletgui.StakingHistory';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dcrwalletgui.StakingHistory.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.StakingHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.StakingHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.StakingHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.StakingHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastBlock: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lineItemsList: jspb.Message.toObjectList(msg.getLineItemsList(),
    proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.StakingHistory}
 */
proto.dcrwalletgui.StakingHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.StakingHistory;
  return proto.dcrwalletgui.StakingHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.StakingHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.StakingHistory}
 */
proto.dcrwalletgui.StakingHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastBlock(value);
      break;
    case 2:
      var value = new proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem;
      reader.readMessage(value,proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.deserializeBinaryFromReader);
      msg.addLineItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.StakingHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.StakingHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.StakingHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.StakingHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastBlock();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLineItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.displayName = 'proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    txType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rewardCredit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ticketCostCredit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ticketCostDebit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    feeDebit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem;
  return proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.walletrpc.TransactionDetails.TransactionType} */ (reader.readEnum());
      msg.setTxType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRewardCredit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTicketCostCredit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTicketCostDebit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeeDebit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRewardCredit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTicketCostCredit();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTicketCostDebit();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFeeDebit();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional walletrpc.TransactionDetails.TransactionType tx_type = 1;
 * @return {!proto.walletrpc.TransactionDetails.TransactionType}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.getTxType = function() {
  return /** @type {!proto.walletrpc.TransactionDetails.TransactionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.walletrpc.TransactionDetails.TransactionType} value */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.setTxType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 reward_credit = 2;
 * @return {number}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.getRewardCredit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.setRewardCredit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 ticket_cost_credit = 3;
 * @return {number}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.getTicketCostCredit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.setTicketCostCredit = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 ticket_cost_debit = 4;
 * @return {number}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.getTicketCostDebit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.setTicketCostDebit = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 fee_debit = 5;
 * @return {number}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.getFeeDebit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.setFeeDebit = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 timestamp = 6;
 * @return {number}
 */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 last_block = 1;
 * @return {number}
 */
proto.dcrwalletgui.StakingHistory.prototype.getLastBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakingHistory.prototype.setLastBlock = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated StakingHistoryLineItem line_items = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem>}
 */
proto.dcrwalletgui.StakingHistory.prototype.getLineItemsList = function() {
  return /** @type{!Array.<!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem, 2));
};


/** @param {!Array.<!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem>} value */
proto.dcrwalletgui.StakingHistory.prototype.setLineItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem}
 */
proto.dcrwalletgui.StakingHistory.prototype.addLineItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.dcrwalletgui.StakingHistory.StakingHistoryLineItem, opt_index);
};


proto.dcrwalletgui.StakingHistory.prototype.clearLineItemsList = function() {
  this.setLineItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dcrwalletgui.StakeDiffHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dcrwalletgui.StakeDiffHistory.repeatedFields_, null);
};
goog.inherits(proto.dcrwalletgui.StakeDiffHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dcrwalletgui.StakeDiffHistory.displayName = 'proto.dcrwalletgui.StakeDiffHistory';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dcrwalletgui.StakeDiffHistory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dcrwalletgui.StakeDiffHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.dcrwalletgui.StakeDiffHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dcrwalletgui.StakeDiffHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dcrwalletgui.StakeDiffHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdiffValuesList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    startBlock: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endBlock: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dcrwalletgui.StakeDiffHistory}
 */
proto.dcrwalletgui.StakeDiffHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dcrwalletgui.StakeDiffHistory;
  return proto.dcrwalletgui.StakeDiffHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dcrwalletgui.StakeDiffHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dcrwalletgui.StakeDiffHistory}
 */
proto.dcrwalletgui.StakeDiffHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setSdiffValuesList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartBlock(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dcrwalletgui.StakeDiffHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dcrwalletgui.StakeDiffHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dcrwalletgui.StakeDiffHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dcrwalletgui.StakeDiffHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdiffValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getStartBlock();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndBlock();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated float sdiff_values = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.dcrwalletgui.StakeDiffHistory.prototype.getSdiffValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.dcrwalletgui.StakeDiffHistory.prototype.setSdiffValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.dcrwalletgui.StakeDiffHistory.prototype.addSdiffValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.dcrwalletgui.StakeDiffHistory.prototype.clearSdiffValuesList = function() {
  this.setSdiffValuesList([]);
};


/**
 * optional uint32 start_block = 2;
 * @return {number}
 */
proto.dcrwalletgui.StakeDiffHistory.prototype.getStartBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakeDiffHistory.prototype.setStartBlock = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 end_block = 3;
 * @return {number}
 */
proto.dcrwalletgui.StakeDiffHistory.prototype.getEndBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.dcrwalletgui.StakeDiffHistory.prototype.setEndBlock = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.dcrwalletgui.Network = {
  MAINNET: 0,
  TESTNET: 1,
  SIMNET: 2
};

goog.object.extend(exports, proto.dcrwalletgui);

syntax = "proto3";

package walletgui;

import "api.proto";

service AppConfig {
  rpc GetConfig(GetConfigRequest) returns (AppConfiguration);
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);
  rpc CreateRawTransaction(CreateRawTransactionRequest)
      returns (CreateRawTransactionResponse);
}

message GetConfigRequest { bytes passphrase = 1; }

message SetConfigRequest {
  AppConfiguration app_config = 1;
  string passphrase = 2;
}

message SetConfigResponse {
  enum UpdateStatus {
    STATUS_SUCCESS = 0;
    STATUS_ERROR = 1;
  }
  UpdateStatus update_status = 1;
  int32 error_code = 2;
  string error_description = 3;
}

enum Network {
  MAINNET = 0;
  TESTNET = 1;
  SIMNET = 2;
}

message RPCEndpoint {
  string id = 1;
  string hostname = 2;
  uint32 port = 3;
  string username = 4;
  string password = 5;
  string cert_file_name = 6;
  string cert_blob = 7;
  Network network = 8;
  string label = 9;
}

message GRPCEndpoint {
  string id = 1;
  string hostname = 2;
  uint32 port = 3;
  string cert_file_name = 4;
  string cert_blob = 5;
  Network network = 6;
  string label = 7;
  bool is_watching_only = 8;
  uint32 active_network = 9;
  uint32 coin_type = 10;
}

message AccountPreference {
  uint32 account_number = 1;
  bool is_hidden = 2;
  uint32 display_order = 3;
}

message WalletPreferences {
  string wallet_endpoint_id = 1;
  repeated AccountPreference account_prefs = 2;
}

enum DisplayUnit {
  DCR = 0;
  ATOMS = 1;
}

enum FiatCurrency {
  USD = 0;
  EUR = 1;
}

message UIPreferences {
  DisplayUnit display_unit = 1;
  FiatCurrency fiat_currency = 2;
  bool is_config_encrypted = 3;
}

message AppConfiguration {
  RPCEndpoint dcrd_endpoint = 1;
  repeated GRPCEndpoint wallet_endpoints = 2;
  string default_wallet_endpoint_id = 3;
  repeated WalletPreferences wallet_preferences = 4;
  walletrpc.RunAccountMixerRequest account_mixer_request_defaults = 5;
  walletrpc.RunTicketBuyerRequest run_auto_buyer_request_defaults = 6;
  repeated string alt_display_currencies = 7;
  UIPreferences ui_preferences = 8;
}

service NetworkService {
  rpc CheckConnection(CheckConnectionRequest) returns (CheckConnectionResponse);
  rpc ConnectWallet(ConnectWalletRequest) returns (ConnectWalletResponse);
}

message CheckConnectionRequest {
  GRPCEndpoint grpc_endpoint = 1;
  RPCEndpoint rpc_endpoint = 2;
}

message CheckConnectionResponse {
  bool isSuccess = 1;
  string error = 2;
}

message ConnectWalletRequest { string wallet_endpoint_id = 1; }

message ConnectWalletResponse {
  bool isSuccess = 1;
  string error = 2;
  GRPCEndpoint endpoint = 3;
}

// exchange rates
message AltCurrencyRates {
  message AltCurrencyRate {
    string currency_code = 1;
    float current_rate = 2;
  }
  repeated AltCurrencyRate rates = 1;
  int64 last_updated_ts = 2;
}

service ExchangeRates {
  rpc GetMarketChart(GetMarketChartRequest) returns (GetMarketChartResponse);
}

message GetMarketChartRequest {
  string currency_code = 1;
  uint32 days = 2;
}

message MarketChartDataPoint {
  int64 timestamp = 1;
  float exchange_rate = 2;
}

message GetMarketChartResponse { repeated MarketChartDataPoint datapoints = 1; }

message StakingHistory {
  message StakingHistoryLineItem {
    walletrpc.TransactionDetails.TransactionType tx_type = 1;
    int64 reward_credit = 2;
    int64 ticket_cost_credit = 3;
    int64 ticket_cost_debit = 4;
    int64 fee_debit = 5;
    int64 timestamp = 6;
    bytes tx_hash = 7;
  }
  int64 last_block = 1;
  repeated StakingHistoryLineItem line_items = 2;
}

message StakeDiffHistory {
  repeated float sdiff_values = 1;
  uint32 start_block = 2;
  uint32 end_block = 3;
}

message UnspentOutput {
  bytes transaction_hash = 1;
  uint32 output_index = 2;
  int64 amount = 3;
  bytes pk_script = 4;
  int64 receive_time = 5;
  bool from_coinbase = 6;
  int32 tree = 7;
  int64 amount_sum = 8;
  int32 script_class = 9;
  repeated string address = 10;
}

message CreateRawTransactionRequest {
  message TransactionInput {
    int64 amount = 1;
    bytes transaction_hash = 2;
    uint32 output_index = 3;
    int32 tree = 4;
  }
  repeated TransactionInput inputs = 1;
  map<string, int64> amounts = 2;
  int64 lock_time = 3;
  int64 expiry = 4;
  int64 fee_rate = 5;
}

message CreateRawTransactionResponse {
  bytes unsigned_transaction = 1;
  int32 estimated_signed_size = 2;
}



/*
message LorcaMessage {
  message Error { string error = 1; }
  bytes payload = 1;
  repeated bytes apayload = 2;
  Error err = 3;
}
*/
